{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flink \u5b66\u4e60\u7b14\u8bb0 \u00b6 Apache Flink\u00ae - Stateful Computations over Data Streams Reference \u00b6 Flink Site Flink Forward Flink(wuchong) \u5f7b\u5e95\u660e\u767dFlink\u7cfb\u7edf\u5b66\u4e60 Apache Flink \u6f2b\u8c08","title":"\u9996\u9875"},{"location":"#flink","text":"Apache Flink\u00ae - Stateful Computations over Data Streams","title":"Flink \u5b66\u4e60\u7b14\u8bb0"},{"location":"#reference","text":"Flink Site Flink Forward Flink(wuchong) \u5f7b\u5e95\u660e\u767dFlink\u7cfb\u7edf\u5b66\u4e60 Apache Flink \u6f2b\u8c08","title":"Reference"},{"location":"glossary/","text":"\u672f\u8bed \u00b6 State \u8868\u793a\u5bf9\u5916\u90e8\u7684\u4f9d\u8d56\uff08Dependence\uff09\u548c\u5f71\u54cd\uff08Effect\uff09\uff0c\u8fd9\u91cc\u662f\u5b58\u50a8\u4f9d\u8d56\u548c\u5f71\u54cd\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u9690\u5f0f\u7684\uff08Implicit\uff09\u3001\u900f\u660e\u7684\uff08Transparent\uff09 \u65e2\u7136\u662f\u6570\u636e\u6216\u7ed3\u6784\uff0c\u5c31\u9700\u8981\u8003\u8651\u5b58\u50a8\u548c\u8bbf\u95ee\uff08StateBackend\uff09\u3001\u5907\u4efd\u548c\u6062\u590d\uff08Checkpoint\uff09\u7b49 \u5e42\u7b49\u6027\uff1a\u6267\u884c\u4e00\u6b21\u4e0e\u591a\u6b21\u7684\u5f71\u54cd\u662f\u4e00\u81f4\u7684 \u7eaf\u51fd\u6570\uff1a\u76f8\u540c\u7684\u8f93\u5165\uff0c\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\uff0c\u65e0\u526f\u4f5c\u7528\uff0c\u662f\u5e42\u7b49\u7684 Time \u4e8b\u4ef6\u65f6\u95f4\uff08Event Time\uff09 \u6444\u5165\u65f6\u95f4\uff08Ingestion Time\uff09 \u5904\u7406\u65f6\u95f4\uff08Processing Time\uff09 Watermark \u6570\u636e\u53ef\u80fd\u5ef6\u8fdf\uff0c\u5ef6\u8fdf\u6570\u636e\u4e0d\u80fd\u4fdd\u8bc1\u5230\u8fbe\uff0c Watermark \u8868\u793a\u5bf9\u4e71\u5e8f\u7684\u65e0\u754c\u6570\u636e\u5904\u7406\u5b8c\u6574\u6027\u7684\u6743\u8861 Window \u662f\u5bf9\u65e0\u754c\u6570\u636e\u8fdb\u884c\u5207\u5206\u7684\u5904\u7406\u7b56\u7565\uff0c Watermark \u662f\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5bf9\u5ef6\u8fdf\u5230\u8fbe\u6570\u636e\u5b8c\u6574\u6027\u7684\u5904\u7406\u7b56\u7565 Watermarks: Time and progress in streaming dataflow and beyond Reference \u00b6","title":"\u672f\u8bed"},{"location":"glossary/#_1","text":"State \u8868\u793a\u5bf9\u5916\u90e8\u7684\u4f9d\u8d56\uff08Dependence\uff09\u548c\u5f71\u54cd\uff08Effect\uff09\uff0c\u8fd9\u91cc\u662f\u5b58\u50a8\u4f9d\u8d56\u548c\u5f71\u54cd\u7684\u6570\u636e\uff0c\u4e00\u822c\u662f\u9690\u5f0f\u7684\uff08Implicit\uff09\u3001\u900f\u660e\u7684\uff08Transparent\uff09 \u65e2\u7136\u662f\u6570\u636e\u6216\u7ed3\u6784\uff0c\u5c31\u9700\u8981\u8003\u8651\u5b58\u50a8\u548c\u8bbf\u95ee\uff08StateBackend\uff09\u3001\u5907\u4efd\u548c\u6062\u590d\uff08Checkpoint\uff09\u7b49 \u5e42\u7b49\u6027\uff1a\u6267\u884c\u4e00\u6b21\u4e0e\u591a\u6b21\u7684\u5f71\u54cd\u662f\u4e00\u81f4\u7684 \u7eaf\u51fd\u6570\uff1a\u76f8\u540c\u7684\u8f93\u5165\uff0c\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\uff0c\u65e0\u526f\u4f5c\u7528\uff0c\u662f\u5e42\u7b49\u7684 Time \u4e8b\u4ef6\u65f6\u95f4\uff08Event Time\uff09 \u6444\u5165\u65f6\u95f4\uff08Ingestion Time\uff09 \u5904\u7406\u65f6\u95f4\uff08Processing Time\uff09 Watermark \u6570\u636e\u53ef\u80fd\u5ef6\u8fdf\uff0c\u5ef6\u8fdf\u6570\u636e\u4e0d\u80fd\u4fdd\u8bc1\u5230\u8fbe\uff0c Watermark \u8868\u793a\u5bf9\u4e71\u5e8f\u7684\u65e0\u754c\u6570\u636e\u5904\u7406\u5b8c\u6574\u6027\u7684\u6743\u8861 Window \u662f\u5bf9\u65e0\u754c\u6570\u636e\u8fdb\u884c\u5207\u5206\u7684\u5904\u7406\u7b56\u7565\uff0c Watermark \u662f\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u5bf9\u5ef6\u8fdf\u5230\u8fbe\u6570\u636e\u5b8c\u6574\u6027\u7684\u5904\u7406\u7b56\u7565 Watermarks: Time and progress in streaming dataflow and beyond","title":"\u672f\u8bed"},{"location":"glossary/#reference","text":"","title":"Reference"},{"location":"projects-and-articles/","text":"Projects & Articles \u00b6 Projects \u00b6 Papers \u00b6 Articles \u00b6 Streaming 101: The world beyond batch Streaming 102: The world beyond batch Resources \u00b6 Reference \u00b6","title":"\u9879\u76ee\u4e0e\u6587\u7ae0"},{"location":"projects-and-articles/#projects-articles","text":"","title":"Projects &amp; Articles"},{"location":"projects-and-articles/#projects","text":"","title":"Projects"},{"location":"projects-and-articles/#papers","text":"","title":"Papers"},{"location":"projects-and-articles/#articles","text":"Streaming 101: The world beyond batch Streaming 102: The world beyond batch","title":"Articles"},{"location":"projects-and-articles/#resources","text":"","title":"Resources"},{"location":"projects-and-articles/#reference","text":"","title":"Reference"},{"location":"concepts/programming-model/","text":"\u6570\u636e\u6d41\u7f16\u7a0b\u6a21\u578b\uff08Dataflow Programming Model\uff09 \u00b6 \u62bd\u8c61\u5c42\u6b21\uff08Levels of Abstraction\uff09 \u00b6 Low-level \u5c42\u63d0\u4f9b\u57fa\u4e8e Process Function \u7f16\u7a0b\u6a21\u578b\u6709\u72b6\u6001\u6d41\u7684\u7b80\u5355\u62bd\u8c61 Core APIs \u5c42\u63d0\u4f9b\u57fa\u4e8e DataStream \uff08\u6709\u754c\u4e0e\u65e0\u754c\u6570\u636e\u6d41\uff09\u548c DataSet \uff08\u6709\u754c\u6570\u636e\u96c6\uff09\u7684\u7f16\u7a0b\u63a5\u53e3 Table API \u5c42\u63d0\u4f9b\u4ee5\u6570\u636e\u8868\uff08\u5173\u7cfb\u6a21\u578b\uff09\u4e3a\u4e2d\u5fc3\u7684\u58f0\u660e\u5f0fDSL\u7f16\u7a0b\u63a5\u53e3\uff0c\u6267\u884c\u524d\u4f1a\u901a\u8fc7\u4f18\u5316\u5668\u4f18\u5316 High-level \u5c42\u63d0\u4f9b\u57fa\u4e8e SQL \u7684\u7f16\u7a0b\u63a5\u53e3\uff0c\u57fa\u4e8eCalcite\u8fdb\u884c\u89e3\u6790\u548c\u4f18\u5316 Programs and Dataflows \u00b6 Source Transformation Sink Parallel Dataflows \u00b6 Operators \u6570\u636e\u4f20\u8f93\uff08\u4f9d\u8d56\uff09\u6a21\u5f0f\uff1a One-to-one(forwarding) Redistributing Windows \u00b6 \u9a71\u52a8\uff08Driven\uff09 \u00b6 \u65f6\u95f4\u9a71\u52a8\uff08time driven: every 30 seconds\uff09 \u6570\u636e\u9a71\u52a8\uff08data driven: every 100 elements\uff09 \u7a97\u53e3\uff08Windows\uff09 \u00b6 \u6eda\u52a8\u7a97\u53e3\uff08tumbling windows: no overlap\uff09 \u6ed1\u52a8\u7a97\u53e3\uff08sliding windows: with overlap\uff09 \u4f1a\u8bdd\u7a97\u53e3\uff08session windows: punctuated by a gap of inactivity\uff09 Time \u00b6 \u4e8b\u4ef6\u65f6\u95f4\uff08Event Time\uff09 \u6444\u5165\u65f6\u95f4\uff08Ingestion Time\uff09 \u5904\u7406\u65f6\u95f4\uff08Processing Time\uff09 Stateful Operations \u00b6 Keyed & Operator State Raw and Managed State Checkpoints for Fault Tolerance \u00b6 Checkpoint Replay Batch on Streaming \u00b6 Fault tolerance: replay Stateful operations: in-memory/out-of-core data structures Iteration: superstep based Reference \u00b6 Dataflow Programming Model","title":"\u7f16\u7a0b\u6a21\u578b"},{"location":"concepts/programming-model/#dataflow-programming-model","text":"","title":"\u6570\u636e\u6d41\u7f16\u7a0b\u6a21\u578b\uff08Dataflow Programming Model\uff09"},{"location":"concepts/programming-model/#levels-of-abstraction","text":"Low-level \u5c42\u63d0\u4f9b\u57fa\u4e8e Process Function \u7f16\u7a0b\u6a21\u578b\u6709\u72b6\u6001\u6d41\u7684\u7b80\u5355\u62bd\u8c61 Core APIs \u5c42\u63d0\u4f9b\u57fa\u4e8e DataStream \uff08\u6709\u754c\u4e0e\u65e0\u754c\u6570\u636e\u6d41\uff09\u548c DataSet \uff08\u6709\u754c\u6570\u636e\u96c6\uff09\u7684\u7f16\u7a0b\u63a5\u53e3 Table API \u5c42\u63d0\u4f9b\u4ee5\u6570\u636e\u8868\uff08\u5173\u7cfb\u6a21\u578b\uff09\u4e3a\u4e2d\u5fc3\u7684\u58f0\u660e\u5f0fDSL\u7f16\u7a0b\u63a5\u53e3\uff0c\u6267\u884c\u524d\u4f1a\u901a\u8fc7\u4f18\u5316\u5668\u4f18\u5316 High-level \u5c42\u63d0\u4f9b\u57fa\u4e8e SQL \u7684\u7f16\u7a0b\u63a5\u53e3\uff0c\u57fa\u4e8eCalcite\u8fdb\u884c\u89e3\u6790\u548c\u4f18\u5316","title":"\u62bd\u8c61\u5c42\u6b21\uff08Levels of Abstraction\uff09"},{"location":"concepts/programming-model/#programs-and-dataflows","text":"Source Transformation Sink","title":"Programs and Dataflows"},{"location":"concepts/programming-model/#parallel-dataflows","text":"Operators \u6570\u636e\u4f20\u8f93\uff08\u4f9d\u8d56\uff09\u6a21\u5f0f\uff1a One-to-one(forwarding) Redistributing","title":"Parallel Dataflows"},{"location":"concepts/programming-model/#windows","text":"","title":"Windows"},{"location":"concepts/programming-model/#driven","text":"\u65f6\u95f4\u9a71\u52a8\uff08time driven: every 30 seconds\uff09 \u6570\u636e\u9a71\u52a8\uff08data driven: every 100 elements\uff09","title":"\u9a71\u52a8\uff08Driven\uff09"},{"location":"concepts/programming-model/#windows_1","text":"\u6eda\u52a8\u7a97\u53e3\uff08tumbling windows: no overlap\uff09 \u6ed1\u52a8\u7a97\u53e3\uff08sliding windows: with overlap\uff09 \u4f1a\u8bdd\u7a97\u53e3\uff08session windows: punctuated by a gap of inactivity\uff09","title":"\u7a97\u53e3\uff08Windows\uff09"},{"location":"concepts/programming-model/#time","text":"\u4e8b\u4ef6\u65f6\u95f4\uff08Event Time\uff09 \u6444\u5165\u65f6\u95f4\uff08Ingestion Time\uff09 \u5904\u7406\u65f6\u95f4\uff08Processing Time\uff09","title":"Time"},{"location":"concepts/programming-model/#stateful-operations","text":"Keyed & Operator State Raw and Managed State","title":"Stateful Operations"},{"location":"concepts/programming-model/#checkpoints-for-fault-tolerance","text":"Checkpoint Replay","title":"Checkpoints for Fault Tolerance"},{"location":"concepts/programming-model/#batch-on-streaming","text":"Fault tolerance: replay Stateful operations: in-memory/out-of-core data structures Iteration: superstep based","title":"Batch on Streaming"},{"location":"concepts/programming-model/#reference","text":"Dataflow Programming Model","title":"Reference"},{"location":"concepts/runtime/","text":"\u5206\u5e03\u5f0f\u8fd0\u884c\u73af\u5883\uff08Distributed Runtime Environment\uff09 \u00b6 Tasks and Operator Chains \u00b6 \u6ee1\u8db3\u7ea6\u675f\u7684 Operator Subtasks \u7ec4\u6210 Operator Chains \uff0c\u6bcf\u4e2atask\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002\u5c06 Operators \u94fe\u63a5\u6210 Task \u662f\u975e\u5e38\u6709\u6548\u7684\u4f18\u5316\uff1a\u5b83\u80fd\u51cf\u5c11\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\uff0c\u51cf\u5c11\u6d88\u606f\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\uff0c\u51cf\u5c11\u6570\u636e\u5728\u7f13\u51b2\u533a\u7684\u4ea4\u6362\uff0c\u51cf\u5c11\u4e86\u5ef6\u8fdf\u7684\u540c\u65f6\u63d0\u9ad8\u6574\u4f53\u7684\u541e\u5410\u91cf Job Managers, Task Managers, Clients \u00b6 JobManagers(Masters)\uff1a\u4efb\u52a1\u8c03\u5ea6\u3001Checkpoints\u3001\u6545\u969c\u6062\u590d TaskManagers(Workers)\uff1a\u6267\u884c\u4efb\u52a1\uff08 Subtasks \uff09\u3001\u7f13\u51b2\u548c\u4ea4\u6362\u6570\u636e\u6d41 Task Slots and Resources \u00b6 TaskManager\uff08JVM \u8fdb\u7a0b\uff09 Task Slot \u662f\u5bf9 TaskManager \u8d44\u6e90\uff08\u5185\u5b58\uff09\u7684\u9694\u79bb\u548c\u5212\u5206 \u6bcf\u4e2a TaskManager \u6709\u591a\u4e2a Slot \u7684\u8bdd\uff0c\u4e5f\u5c31\u662f\u8bf4\u591a\u4e2a Task \u8fd0\u884c\u5728\u540c\u4e00\u4e2aJVM\u4e2d\u3002\u800c\u5728\u540c\u4e00\u4e2a JVM \u8fdb\u7a0b\u4e2d\u7684 Task\uff0c\u53ef\u4ee5\u5171\u4eab TCP \u8fde\u63a5\uff08\u57fa\u4e8e\u591a\u8def\u590d\u7528\uff09\u548c\u5fc3\u8df3\u6d88\u606f\uff0c\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u7684\u7f51\u7edc\u4f20\u8f93\u3002\u4e5f\u80fd\u5171\u4eab\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86\u6bcf\u4e2a Task \u7684\u6d88\u8017 Job\u6240\u9700\u7684 Task Slots\u6570\u4e0e\u5176\u6700\u9ad8\u7684\u5e76\u884c\u5ea6\u4e00\u81f4 Slot\u5171\u4eab\u4f7f\u8d44\u6e90\u5f97\u5230\u66f4\u5145\u5206\u7684\u5229\u7528 State Backends \u00b6 \u5185\u5b58\uff08Hash Map\uff09 RocksDB\uff08Key/Value\uff09 Savepoints \u00b6 \u7528\u4e8e\u6062\u590d\u7a0b\u5e8f\uff08\u7a0b\u5e8f\u5347\u7ea7\u6216\u96c6\u7fa4\u7ef4\u62a4\uff09 \u901a\u8fc7 REST APIs \u6216\u547d\u4ee4\u624b\u52a8\u89e6\u53d1 Reference \u00b6 Distributed Runtime Environment","title":"\u8fd0\u884c\u73af\u5883"},{"location":"concepts/runtime/#distributed-runtime-environment","text":"","title":"\u5206\u5e03\u5f0f\u8fd0\u884c\u73af\u5883\uff08Distributed Runtime Environment\uff09"},{"location":"concepts/runtime/#tasks-and-operator-chains","text":"\u6ee1\u8db3\u7ea6\u675f\u7684 Operator Subtasks \u7ec4\u6210 Operator Chains \uff0c\u6bcf\u4e2atask\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u3002\u5c06 Operators \u94fe\u63a5\u6210 Task \u662f\u975e\u5e38\u6709\u6548\u7684\u4f18\u5316\uff1a\u5b83\u80fd\u51cf\u5c11\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\uff0c\u51cf\u5c11\u6d88\u606f\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\uff0c\u51cf\u5c11\u6570\u636e\u5728\u7f13\u51b2\u533a\u7684\u4ea4\u6362\uff0c\u51cf\u5c11\u4e86\u5ef6\u8fdf\u7684\u540c\u65f6\u63d0\u9ad8\u6574\u4f53\u7684\u541e\u5410\u91cf","title":"Tasks and Operator Chains"},{"location":"concepts/runtime/#job-managers-task-managers-clients","text":"JobManagers(Masters)\uff1a\u4efb\u52a1\u8c03\u5ea6\u3001Checkpoints\u3001\u6545\u969c\u6062\u590d TaskManagers(Workers)\uff1a\u6267\u884c\u4efb\u52a1\uff08 Subtasks \uff09\u3001\u7f13\u51b2\u548c\u4ea4\u6362\u6570\u636e\u6d41","title":"Job Managers, Task Managers, Clients"},{"location":"concepts/runtime/#task-slots-and-resources","text":"TaskManager\uff08JVM \u8fdb\u7a0b\uff09 Task Slot \u662f\u5bf9 TaskManager \u8d44\u6e90\uff08\u5185\u5b58\uff09\u7684\u9694\u79bb\u548c\u5212\u5206 \u6bcf\u4e2a TaskManager \u6709\u591a\u4e2a Slot \u7684\u8bdd\uff0c\u4e5f\u5c31\u662f\u8bf4\u591a\u4e2a Task \u8fd0\u884c\u5728\u540c\u4e00\u4e2aJVM\u4e2d\u3002\u800c\u5728\u540c\u4e00\u4e2a JVM \u8fdb\u7a0b\u4e2d\u7684 Task\uff0c\u53ef\u4ee5\u5171\u4eab TCP \u8fde\u63a5\uff08\u57fa\u4e8e\u591a\u8def\u590d\u7528\uff09\u548c\u5fc3\u8df3\u6d88\u606f\uff0c\u53ef\u4ee5\u51cf\u5c11\u6570\u636e\u7684\u7f51\u7edc\u4f20\u8f93\u3002\u4e5f\u80fd\u5171\u4eab\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86\u6bcf\u4e2a Task \u7684\u6d88\u8017 Job\u6240\u9700\u7684 Task Slots\u6570\u4e0e\u5176\u6700\u9ad8\u7684\u5e76\u884c\u5ea6\u4e00\u81f4 Slot\u5171\u4eab\u4f7f\u8d44\u6e90\u5f97\u5230\u66f4\u5145\u5206\u7684\u5229\u7528","title":"Task Slots and Resources"},{"location":"concepts/runtime/#state-backends","text":"\u5185\u5b58\uff08Hash Map\uff09 RocksDB\uff08Key/Value\uff09","title":"State Backends"},{"location":"concepts/runtime/#savepoints","text":"\u7528\u4e8e\u6062\u590d\u7a0b\u5e8f\uff08\u7a0b\u5e8f\u5347\u7ea7\u6216\u96c6\u7fa4\u7ef4\u62a4\uff09 \u901a\u8fc7 REST APIs \u6216\u547d\u4ee4\u624b\u52a8\u89e6\u53d1","title":"Savepoints"},{"location":"concepts/runtime/#reference","text":"Distributed Runtime Environment","title":"Reference"},{"location":"dev/restart-strategy/","text":"Restart Strategies \u00b6 Fixed Delay Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u6309\u7167\u6307\u5b9a\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u6307\u5b9a\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5bf9\u4f5c\u4e1a\u8fdb\u884c\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . fixedDelayRestart ( 3 , // The number of times that Flink retries the execution before the job is declared as failed. Time . of ( 10 , TimeUnit . SECONDS ) // Delaying the retry means that after a failed execution, the re-execution does not start immediately, but only after a certain delay. Delaying the retries can be helpful when the program interacts with external systems where for example connections or pending transactions should reach a timeout before re-execution is attempted. )) Failure Rate Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u5728\u6307\u5b9a\u95f4\u9694\u65f6\u95f4\u5185\uff0c\u6309\u7167\u6307\u5b9a\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u6307\u5b9a\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5bf9\u4f5c\u4e1a\u8fdb\u884c\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . failureRateRestart ( 3 , // Maximum number of restarts in given time interval before failing a job Time . of ( 5 , TimeUnit . MINUTES ), // Time interval for measuring failure rate Time . of ( 10 , TimeUnit . SECONDS ) // Delay between two consecutive restart attempts )) No Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u65e0\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . noRestart ()) Fallback Restart Strategy \u96c6\u7fa4\u9ed8\u8ba4\u91cd\u542f\u7b56\u7565\uff0c\u9ed8\u8ba4\u4e3a Fixed Delay Restart Strategy (1 or Integer.MAX_VALUE, akka.ask.timeout or 10s) Reference \u00b6 Restart Strategies","title":"\u91cd\u542f\u7b56\u7565"},{"location":"dev/restart-strategy/#restart-strategies","text":"Fixed Delay Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u6309\u7167\u6307\u5b9a\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u6307\u5b9a\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5bf9\u4f5c\u4e1a\u8fdb\u884c\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . fixedDelayRestart ( 3 , // The number of times that Flink retries the execution before the job is declared as failed. Time . of ( 10 , TimeUnit . SECONDS ) // Delaying the retry means that after a failed execution, the re-execution does not start immediately, but only after a certain delay. Delaying the retries can be helpful when the program interacts with external systems where for example connections or pending transactions should reach a timeout before re-execution is attempted. )) Failure Rate Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u5728\u6307\u5b9a\u95f4\u9694\u65f6\u95f4\u5185\uff0c\u6309\u7167\u6307\u5b9a\u7684\u5ef6\u8fdf\u65f6\u95f4\u548c\u6307\u5b9a\u7684\u91cd\u8bd5\u6b21\u6570\uff0c\u5bf9\u4f5c\u4e1a\u8fdb\u884c\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . failureRateRestart ( 3 , // Maximum number of restarts in given time interval before failing a job Time . of ( 5 , TimeUnit . MINUTES ), // Time interval for measuring failure rate Time . of ( 10 , TimeUnit . SECONDS ) // Delay between two consecutive restart attempts )) No Restart Strategy \u4f5c\u4e1a\u5931\u8d25\u540e\uff0c\u65e0\u91cd\u542f\u5c1d\u8bd5 val env = ExecutionEnvironment . getExecutionEnvironment () env . setRestartStrategy ( RestartStrategies . noRestart ()) Fallback Restart Strategy \u96c6\u7fa4\u9ed8\u8ba4\u91cd\u542f\u7b56\u7565\uff0c\u9ed8\u8ba4\u4e3a Fixed Delay Restart Strategy (1 or Integer.MAX_VALUE, akka.ask.timeout or 10s)","title":"Restart Strategies"},{"location":"dev/restart-strategy/#reference","text":"Restart Strategies","title":"Reference"},{"location":"internals/components/","text":"Component Stack \u00b6 Deployment \uff1a\u63d0\u4f9b Standalone \u3001 YARN \u7b49\u90e8\u7f72\u8fd0\u884c\u65b9\u5f0f Runtime \uff1a\u57fa\u4e8e JobGraph \uff0c\u751f\u6210\u5e76\u884c\u5904\u7406\u7684\u6570\u636e\u6d41\uff08\u5176\u4e2d JobGraph \u57fa\u4e8e DAG \u8868\u8fbe\u4e00\u4e2a Flink \u7684\u6570\u636e\u6d41\u7a0b\u5e8f\uff09 APIs \uff1a\u57fa\u4e8e DataStream \uff08\u6709\u754c\u4e0e\u65e0\u754c\u6570\u636e\u6d41\uff09\u548c DataSet \uff08\u6709\u754c\u6570\u636e\u96c6\uff09\u7684\u7f16\u7a0b\u63a5\u53e3 Table APIs & SQL \u63d0\u4f9b\u4ee5\u6570\u636e\u8868\uff08\u5173\u7cfb\u6a21\u578b\uff09\u4e3a\u4e2d\u5fc3\u7684\u58f0\u660e\u5f0fDSL\u548cSQL\u7f16\u7a0b\u63a5\u53e3 CEP \u5904\u7406\u590d\u6742\u4e8b\u4ef6\u4efb\u52a1\uff0c FlinkML \u5904\u7406\u673a\u5668\u5b66\u4e60\u4efb\u52a1\uff0c Gelly \u5904\u7406\u56fe\u8ba1\u7b97\u4efb\u52a1 Reference \u00b6 Component Stack","title":"\u7ec4\u4ef6"},{"location":"internals/components/#component-stack","text":"Deployment \uff1a\u63d0\u4f9b Standalone \u3001 YARN \u7b49\u90e8\u7f72\u8fd0\u884c\u65b9\u5f0f Runtime \uff1a\u57fa\u4e8e JobGraph \uff0c\u751f\u6210\u5e76\u884c\u5904\u7406\u7684\u6570\u636e\u6d41\uff08\u5176\u4e2d JobGraph \u57fa\u4e8e DAG \u8868\u8fbe\u4e00\u4e2a Flink \u7684\u6570\u636e\u6d41\u7a0b\u5e8f\uff09 APIs \uff1a\u57fa\u4e8e DataStream \uff08\u6709\u754c\u4e0e\u65e0\u754c\u6570\u636e\u6d41\uff09\u548c DataSet \uff08\u6709\u754c\u6570\u636e\u96c6\uff09\u7684\u7f16\u7a0b\u63a5\u53e3 Table APIs & SQL \u63d0\u4f9b\u4ee5\u6570\u636e\u8868\uff08\u5173\u7cfb\u6a21\u578b\uff09\u4e3a\u4e2d\u5fc3\u7684\u58f0\u660e\u5f0fDSL\u548cSQL\u7f16\u7a0b\u63a5\u53e3 CEP \u5904\u7406\u590d\u6742\u4e8b\u4ef6\u4efb\u52a1\uff0c FlinkML \u5904\u7406\u673a\u5668\u5b66\u4e60\u4efb\u52a1\uff0c Gelly \u5904\u7406\u56fe\u8ba1\u7b97\u4efb\u52a1","title":"Component Stack"},{"location":"internals/components/#reference","text":"Component Stack","title":"Reference"},{"location":"internals/stream-checkpointing/","text":"Data Streaming Fault Tolerance \u00b6 Checkpointing \u00b6 \u5206\u5e03\u5f0f\u5feb\u7167\uff08Distributed Snapshots\uff09\uff1a\u57fa\u4e8e\u5b9a\u5236\u7684Chandy Lamport\u7b97\u6cd5 Barriers \u00b6 State \u00b6 Reference \u00b6 Data Streaming Fault Tolerance Lightweight Asynchronous Snapshots for Distributed Dataflows Distributed Snapshots: Determining Global States of a Distributed System","title":"Data Streaming Fault Tolerance"},{"location":"internals/stream-checkpointing/#data-streaming-fault-tolerance","text":"","title":"Data Streaming Fault Tolerance"},{"location":"internals/stream-checkpointing/#checkpointing","text":"\u5206\u5e03\u5f0f\u5feb\u7167\uff08Distributed Snapshots\uff09\uff1a\u57fa\u4e8e\u5b9a\u5236\u7684Chandy Lamport\u7b97\u6cd5","title":"Checkpointing"},{"location":"internals/stream-checkpointing/#barriers","text":"","title":"Barriers"},{"location":"internals/stream-checkpointing/#state","text":"","title":"State"},{"location":"internals/stream-checkpointing/#reference","text":"Data Streaming Fault Tolerance Lightweight Asynchronous Snapshots for Distributed Dataflows Distributed Snapshots: Determining Global States of a Distributed System","title":"Reference"},{"location":"monitoring/metrics/","text":"Metrics \u00b6 Reference \u00b6","title":"Metrics"},{"location":"monitoring/metrics/#metrics","text":"","title":"Metrics"},{"location":"monitoring/metrics/#reference","text":"","title":"Reference"},{"location":"ops/configuration/","text":"Configuration \u00b6 \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 jobmanager.heap.size - 1024m 2g, 4g JobManager \u5185\u5b58 taskmanager.heap.size - 1024m 4g, 16g TaskManager \u5185\u5b58 Reference \u00b6 Configuration","title":"\u914d\u7f6e"},{"location":"ops/configuration/#configuration","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 jobmanager.heap.size - 1024m 2g, 4g JobManager \u5185\u5b58 taskmanager.heap.size - 1024m 4g, 16g TaskManager \u5185\u5b58","title":"Configuration"},{"location":"ops/configuration/#reference","text":"Configuration","title":"Reference"}]}